- content_for :javascript, javascript_include_tag('treemenu', :plugin => 'natto')
- content_for :title, "#{Natto.site_title} - #{@object.title}"
- page_title = (@object.page.nil? ? @object.title : @object.page.title)
- content_for :page_title, page_title
- # locate create and update information
- create  = ChangeLog.find(:first, :conditions => {:object_class => @object.class.name.tableize.singularize, :object_id => @object.id, :action => ChangeLog::CREATE})
- publish = ChangeLog.find(:first, :conditions => {:object_class => @object.class.name.tableize.singularize, :object_id => @object.id, :action => ChangeLog::PUBLISH})
#blog
  #blog_posts
    .post_date
      - if publish.nil?
        = format_date(create.performed_at, :long) unless create.nil?
      - else
        = format_date(publish.performed_at, :long)
    %h2= @object.title
    .post_description= @object.description unless @object.description.blank?
    .post_content= @object.content
    - unless @object.page.page_type.eql?(Page::NEWS)
      %p= render :partial => "posts/share"
      %p
        = link_to(image_tag("link.png", :plugin => 'natto'), post_path(@object))
        = link_to("Permalink", post_path(@object))
    - if logged_in? && current_user.is_administrator?
      %p.post_controls
        = link_to(monitor_icon('Statistics'), instance_logs_path('post', @object))
        = link_to edit_icon('Edit'), edit_post_path(@object)
        = link_to destroy_icon('Destroy'), @object, :confirm => "Are you sure you want to permanently delete this post?", :method => :delete
    - unless @object.page.page_type.eql?(Page::NEWS)
      #comments
        %p
          %b= "#{pluralize(@object.comments.find(:all, :conditions => ["violation_votes < :max_violations", {:max_violations => Natto.max_violation_votes}]).size, 'comment')}"
        - @object.comments.find(:all, :conditions => ["violation_votes < :max_votes", {:max_votes => Natto.max_violation_votes}]).each do |comment| 
          %div{:class => ("comment " + cycle("even", "odd"))}
            %p= comment.content
            %span.small
              Posted by
              %br
              .comment_tools= link_to("Mark as violation", comment_violation_path(comment))
              = "#{comment.name}, #{format_time(comment.created_at, :twenty_four, false)}"
              = "#{format_date(comment.created_at, :short, false)}" unless comment.created_at.strftime("%Y%j").eql?(Time.now.strftime("%Y%j"))
      = render :partial => 'comments/form', :locals => {:comment => @comment}
  #blog_sidebar
    #sidebar_content= @object.page.content unless @object.page.nil?
    #archived_posts
      %h4 Blog archive
      = render :partial => 'posts/sidebar'
